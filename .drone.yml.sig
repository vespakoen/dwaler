eyJhbGciOiJIUzI1NiJ9.cGlwZWxpbmU6CiAgY2hlY2stZGlmZnM6CiAgICBpbWFnZTogYnJhdmlzc2ltb2xhYnMvYWxwaW5lLWdpdAogICAgY29tbWFuZHM6CiAgICAgIC0gY2QgL2Ryb25lL3NyYy9naXRodWIuY29tL3Zlc3Bha29lbi9kd2FsZXIKICAgICAgLSBnaXQgZGlmZiAtLW5hbWUtb25seSAke0RST05FX1BSRVZfQ09NTUlUX1NIQX0uLkAKICAgICAgLSBnaXQgZGlmZiAtLWV4aXQtY29kZSAtLW5hbWUtb25seSAke0RST05FX1BSRVZfQ09NTUlUX1NIQX0uLkAgLS0gbGlicy9kd2FsZXItY2xpZW50LyB8fCBlY2hvICJ0cnVlIiA-IGxpYi1kd2FsZXItY2xpZW50X2NoYW5nZWQKICAgICAgLSBnaXQgZGlmZiAtLWV4aXQtY29kZSAtLW5hbWUtb25seSAke0RST05FX1BSRVZfQ09NTUlUX1NIQX0uLkAgLS0gYXBwcy9kZXNrdG9wLyB8fCBlY2hvICJ0cnVlIiA-IGFwcC1kZXNrdG9wX2NoYW5nZWQKICAgICAgLSBnaXQgZGlmZiAtLWV4aXQtY29kZSAtLW5hbWUtb25seSAke0RST05FX1BSRVZfQ09NTUlUX1NIQX0uLkAgLS0gYXBwcy9tb2JpbGUvIHx8IGVjaG8gInRydWUiID4gYXBwLW1vYmlsZV9jaGFuZ2VkCiAgICAgIC0gZ2l0IGRpZmYgLS1leGl0LWNvZGUgLS1uYW1lLW9ubHkgJHtEUk9ORV9QUkVWX0NPTU1JVF9TSEF9Li5AIC0tIGNoaXBzL25hbm8vIHx8IGVjaG8gInRydWUiID4gY2hpcC1uYW5vX2NoYW5nZWQKIyBERVNLVE9QIEFQUAogICMgTE9BRCBDQUNIRQogIGxvYWQtYXBwLWRlc2t0b3AtY2FjaGU6CiAgICBpbWFnZTogcGx1Z2lucy9zZnRwLWNhY2hlOmxhdGVzdAogICAgbW91bnQ6CiAgICAgIC0gYXBwcy9kZXNrdG9wL25vZGVfbW9kdWxlcwogICAgcmVzdG9yZTogdHJ1ZQogICAgd2hlbjoKICAgICAgZXZlbnQ6IFsgcHVsbF9yZXF1ZXN0LCBwdXNoIF0KICAjIEJVSUxECiAgYnVpbGQtYXBwLWRlc2t0b3A6CiAgICBpbWFnZTogbm9kZTo2CiAgICBlbnZpcm9ubWVudDoKICAgICAgTlBNX0NPTkZJR19MT0dMRVZFTDogIndhcm4iCiAgICAgIE5QTV9DT05GSUdfQ09MT1I6ICJhbHdheXMiCiAgICBjb21tYW5kczoKICAgICAgLSBjYXQgYXBwLWRlc2t0b3BfY2hhbmdlZCB8fCBleGl0IDAKICAgICAgLSBjZCBhcHBzL2Rlc2t0b3AKICAgICAgLSBucG0gaW5zdGFsbAogICAgICAtIG5wbSB0ZXN0CiAgICAgIC0gbnBtIHJ1biBidWlsZAogICMgU0FWRSBDQUNIRQogIHNhdmUtYXBwLWRlc2t0b3AtY2FjaGU6CiAgICBpbWFnZTogcGx1Z2lucy9zZnRwLWNhY2hlOmxhdGVzdAogICAgbW91bnQ6CiAgICAgIC0gYXBwcy9kZXNrdG9wL25vZGVfbW9kdWxlcwogICAgcmVidWlsZDogdHJ1ZQogICAgd2hlbjoKICAgICAgZXZlbnQ6IFsgcHVzaCBdCgojIE1PQklMRSBBUFAKICAjIExPQUQgQ0FDSEUKICBsb2FkLWFwcC1tb2JpbGUtY2FjaGU6CiAgICBpbWFnZTogcGx1Z2lucy9zZnRwLWNhY2hlOmxhdGVzdAogICAgbW91bnQ6CiAgICAgIC0gYXBwcy9tb2JpbGUvbm9kZV9tb2R1bGVzCiAgICByZXN0b3JlOiB0cnVlCiAgICB3aGVuOgogICAgICBldmVudDogWyBwdWxsX3JlcXVlc3QsIHB1c2ggXQogICMgQlVJTEQKICBidWlsZC1hcHAtbW9iaWxlOgogICAgaW1hZ2U6IG5vZGU6NgogICAgZW52aXJvbm1lbnQ6CiAgICAgIE5QTV9DT05GSUdfTE9HTEVWRUw6ICJ3YXJuIgogICAgICBOUE1fQ09ORklHX0NPTE9SOiAiYWx3YXlzIgogICAgY29tbWFuZHM6CiAgICAgIC0gY2F0IGFwcC1tb2JpbGVfY2hhbmdlZCB8fCBleGl0IDAKICAgICAgLSBjZCBhcHBzL21vYmlsZQogICAgICAtIG5wbSBpbnN0YWxsCiAgICAgIC0gbnBtIHRlc3QKICAgICAgLSBucG0gcnVuIGJ1aWxkCiAgIyBTQVZFIENBQ0hFCiAgc2F2ZS1hcHAtbW9iaWxlLWNhY2hlOgogICAgaW1hZ2U6IHBsdWdpbnMvc2Z0cC1jYWNoZTpsYXRlc3QKICAgIG1vdW50OgogICAgICAtIGFwcHMvbW9iaWxlL25vZGVfbW9kdWxlcwogICAgcmVidWlsZDogdHJ1ZQogICAgd2hlbjoKICAgICAgZXZlbnQ6IFsgcHVzaCBdCgojIEpTIENMSUVOVCBMSUIKICAjIExPQUQgQ0FDSEUKICBsb2FkLWxpYi1kd2FsZXItY2xpZW50LWNhY2hlOgogICAgaW1hZ2U6IHBsdWdpbnMvc2Z0cC1jYWNoZTpsYXRlc3QKICAgIG1vdW50OgogICAgICAtIGxpYnMvZHdhbGVyLWNsaWVudC9ub2RlX21vZHVsZXMKICAgIHJlc3RvcmU6IHRydWUKICAgIHdoZW46CiAgICAgIGV2ZW50OiBbIHB1bGxfcmVxdWVzdCwgcHVzaCBdCiAgIyBCVUlMRAogIGJ1aWxkLWxpYi1kd2FsZXItY2xpZW50OgogICAgaW1hZ2U6IG5vZGU6NgogICAgZW52aXJvbm1lbnQ6CiAgICAgIE5QTV9DT05GSUdfTE9HTEVWRUw6ICJ3YXJuIgogICAgICBOUE1fQ09ORklHX0NPTE9SOiAiYWx3YXlzIgogICAgY29tbWFuZHM6CiAgICAgIC0gY2F0IGxpYi1kd2FsZXItY2xpZW50X2NoYW5nZWQgfHwgZXhpdCAwCiAgICAgIC0gY2QgbGlicy9kd2FsZXItY2xpZW50CiAgICAgIC0gbnBtIGluc3RhbGwKICAgICAgLSBucG0gdGVzdAogICAgICAtIG5wbSBydW4gYnVpbGQKICAjIFNBVkUgQ0FDSEUKICBzYXZlLWxpYi1kd2FsZXItY2xpZW50LWNhY2hlOgogICAgaW1hZ2U6IHBsdWdpbnMvc2Z0cC1jYWNoZTpsYXRlc3QKICAgIG1vdW50OgogICAgICAtIGxpYnMvZHdhbGVyLWNsaWVudC9ub2RlX21vZHVsZXMKICAgIHJlYnVpbGQ6IHRydWUKICAgIHdoZW46CiAgICAgIGV2ZW50OiBbIHB1c2ggXQoKIyBOQU5PIENISVAKICAjIEJVSUxECiAgYnVpbGQtY2hpcC1uYW5vOgogICAgaW1hZ2U6IHVidW50dTp4ZW5pYWwKICAgIGNvbW1hbmRzOgogICAgICAtIHB5dGhvbiAtYyAiJChjdXJsIC1mc1NMIGh0dHBzOi8vcmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbS9wbGF0Zm9ybWlvL3BsYXRmb3JtaW8vbWFzdGVyL3NjcmlwdHMvZ2V0LXBsYXRmb3JtaW8ucHkpIgogICAgICAtIHBsYXRmb3JtaW8gLS1oZWxwCgojIFNMQUNLIE5PVElGSUNBVElPTlMKICBub3RpZnk6CiAgICBpbWFnZTogcGx1Z2lucy9zbGFjazpsYXRlc3QKICAgIGNoYW5uZWw6IGdlbmVyYWw.2bhGuJYUGJaWjWAiVsp_SFw75NjH8JSl0q8CiGXk7-k