eyJhbGciOiJIUzI1NiJ9.cGlwZWxpbmU6CiAgY2hlY2stZGlmZnM6CiAgICBpbWFnZTogYnJhdmlzc2ltb2xhYnMvYWxwaW5lLWdpdAogICAgY29tbWFuZHM6CiAgICAgIC0gY2QgL2Ryb25lL3NyYy9naXRodWIuY29tL3Zlc3Bha29lbi9kd2FsZXIKICAgICAgLSBnaXQgZGlmZiAtLW5hbWUtb25seSAke0RST05FX1BSRVZfQ09NTUlUX1NIQX0uLkAKICAgICAgLSBnaXQgZGlmZiAtLWV4aXQtY29kZSAtLW5hbWUtb25seSAke0RST05FX1BSRVZfQ09NTUlUX1NIQX0uLkAgLS0gbGlicy9kd2FsZXItY2xpZW50LyB8fCBlY2hvICJ0cnVlIiA-IGxpYi1kd2FsZXItY2xpZW50X2NoYW5nZWQKICAgICAgLSBnaXQgZGlmZiAtLWV4aXQtY29kZSAtLW5hbWUtb25seSAke0RST05FX1BSRVZfQ09NTUlUX1NIQX0uLkAgLS0gYXBwcy9kZXNrdG9wLyB8fCBlY2hvICJ0cnVlIiA-IGFwcC1kZXNrdG9wX2NoYW5nZWQKICAgICAgLSBnaXQgZGlmZiAtLWV4aXQtY29kZSAtLW5hbWUtb25seSAke0RST05FX1BSRVZfQ09NTUlUX1NIQX0uLkAgLS0gYXBwcy9tb2JpbGUvIHx8IGVjaG8gInRydWUiID4gYXBwLW1vYmlsZV9jaGFuZ2VkCiAgICAgIC0gZ2l0IGRpZmYgLS1leGl0LWNvZGUgLS1uYW1lLW9ubHkgJHtEUk9ORV9QUkVWX0NPTU1JVF9TSEF9Li5AIC0tIGNoaXBzL25hbm8vIHx8IGVjaG8gInRydWUiID4gY2hpcC1uYW5vX2NoYW5nZWQKIyBERVNLVE9QIEFQUAogICMgTE9BRCBDQUNIRQogIGxvYWQtYXBwLWRlc2t0b3AtY2FjaGU6CiAgICBpbWFnZTogcGx1Z2lucy9zZnRwLWNhY2hlOmxhdGVzdAogICAgbW91bnQ6CiAgICAgIC0gYXBwcy9kZXNrdG9wL25vZGVfbW9kdWxlcwogICAgcmVzdG9yZTogdHJ1ZQogICAgd2hlbjoKICAgICAgZXZlbnQ6IFsgcHVsbF9yZXF1ZXN0LCBwdXNoIF0KICAjIEJVSUxECiAgYnVpbGQtYXBwLWRlc2t0b3A6CiAgICBpbWFnZTogbm9kZTo2CiAgICBlbnZpcm9ubWVudDoKICAgICAgTlBNX0NPTkZJR19MT0dMRVZFTDogIndhcm4iCiAgICAgIE5QTV9DT05GSUdfQ09MT1I6ICJhbHdheXMiCiAgICBjb21tYW5kczoKICAgICAgIyAtIGNhdCBhcHAtZGVza3RvcF9jaGFuZ2VkIHx8IGV4aXQgMAogICAgICAtIGRwa2cgLS1hZGQtYXJjaGl0ZWN0dXJlIGkzODYKICAgICAgLSB3Z2V0IGh0dHBzOi8vZGwud2luZWhxLm9yZy93aW5lLWJ1aWxkcy9SZWxlYXNlLmtleQogICAgICAtIGFwdC1rZXkgYWRkIFJlbGVhc2Uua2V5CiAgICAgIC0gYXB0LWdldCB1cGRhdGUgLXkKICAgICAgLSBhcHQtZ2V0IGluc3RhbGwgYXB0LXRyYW5zcG9ydC1odHRwcwogICAgICAtIGJhc2ggLWMgImVjaG8gJ2RlYiBodHRwczovL2RsLndpbmVocS5vcmcvd2luZS1idWlsZHMvZGViaWFuLyBqZXNzaWUgbWFpbicgPj4gL2V0Yy9hcHQvc291cmNlcy5saXN0IgogICAgICAtIGFwdC1nZXQgdXBkYXRlIC15CiAgICAgIC0gYXB0LWdldCBpbnN0YWxsIC15IHdpbmUtZGV2ZWwKICAgICAgLSBjZCBhcHBzL2Rlc2t0b3AKICAgICAgLSBucG0gaW5zdGFsbAogICAgICAtIG5wbSB0ZXN0CiAgICAgIC0gbnBtIHJ1biBidWlsZAogICAgICAtIG5wbSBydW4gcmVsZWFzZQogICMgU0FWRSBDQUNIRQogIHNhdmUtYXBwLWRlc2t0b3AtY2FjaGU6CiAgICBpbWFnZTogcGx1Z2lucy9zZnRwLWNhY2hlOmxhdGVzdAogICAgbW91bnQ6CiAgICAgIC0gYXBwcy9kZXNrdG9wL25vZGVfbW9kdWxlcwogICAgcmVidWlsZDogdHJ1ZQogICAgd2hlbjoKICAgICAgZXZlbnQ6IFsgcHVzaCBdCgojIE1PQklMRSBBUFAKICAjIExPQUQgQ0FDSEUKICBsb2FkLWFwcC1tb2JpbGUtY2FjaGU6CiAgICBpbWFnZTogcGx1Z2lucy9zZnRwLWNhY2hlOmxhdGVzdAogICAgbW91bnQ6CiAgICAgIC0gYXBwcy9tb2JpbGUvbm9kZV9tb2R1bGVzCiAgICByZXN0b3JlOiB0cnVlCiAgICB3aGVuOgogICAgICBldmVudDogWyBwdWxsX3JlcXVlc3QsIHB1c2ggXQogICMgQlVJTEQKICBidWlsZC1hcHAtbW9iaWxlOgogICAgaW1hZ2U6IG5vZGU6NgogICAgZW52aXJvbm1lbnQ6CiAgICAgIE5QTV9DT05GSUdfTE9HTEVWRUw6ICJ3YXJuIgogICAgICBOUE1fQ09ORklHX0NPTE9SOiAiYWx3YXlzIgogICAgY29tbWFuZHM6CiAgICAgICMgLSBjYXQgYXBwLW1vYmlsZV9jaGFuZ2VkIHx8IGV4aXQgMAogICAgICAtIGNkIGFwcHMvbW9iaWxlCiAgICAgIC0gbnBtIGluc3RhbGwKICAgICAgLSBucG0gdGVzdAogICAgICAtIG5wbSBzdGFydCAmCiAgICAgIC0gY3VybCAiaHR0cDovL2xvY2FsaG9zdDo4MDgxL2luZGV4LmFuZHJvaWQuYnVuZGxlP3BsYXRmb3JtPWFuZHJvaWQiIC1vICJhbmRyb2lkL2FwcC9zcmMvbWFpbi9hc3NldHMvaW5kZXguYW5kcm9pZC5idW5kbGUiCiAgIyBDT01QSUxFCiAgY29tcGlsZS1hcHAtbW9iaWxlLWFuZHJvaWQ6CiAgICBpbWFnZTogYmVldmVsb3AvYW5kcm9pZDpsYXRlc3QKICAgIGNvbW1hbmRzOgogICAgICAtIGNkIGFwcHMvbW9iaWxlL2FuZHJvaWQKICAgICAgLSAuL2dyYWRsZXcgYXNzZW1ibGVSZWxlYXNlCiAgICAgIC0ga2V5dG9vbCAtZ2Vua2V5IC12IC1rZXlzdG9yZSBteS1rZXlzdG9yZS5rZXlzdG9yZSAtYWxpYXMgbmFtZV9hbGlhcyAta2V5YWxnIFJTQSAtdmFsaWRpdHkgMTAwMDAKICAgICAgIyAtIGphcnNpZ25lciAtdmVyYm9zZSAta2V5c3RvcmUgbXkta2V5c3RvcmUua2V5c3RvcmUgPHBhdGggb2YgYXBrPiAgYWxpYXNfbmFtZQogICAgICAjIC0gemlwYWxpZ24gLWYgLXYgNCA8eW91ci5hcGsgPiAgPHlvdXJfYWxpZ25lZC5hcGs-CiAgIyBTQVZFIENBQ0hFCiAgc2F2ZS1hcHAtbW9iaWxlLWNhY2hlOgogICAgaW1hZ2U6IHBsdWdpbnMvc2Z0cC1jYWNoZTpsYXRlc3QKICAgIG1vdW50OgogICAgICAtIGFwcHMvbW9iaWxlL25vZGVfbW9kdWxlcwogICAgcmVidWlsZDogdHJ1ZQogICAgd2hlbjoKICAgICAgZXZlbnQ6IFsgcHVzaCBdCgojIEpTIENMSUVOVCBMSUIKICAjIExPQUQgQ0FDSEUKICBsb2FkLWxpYi1kd2FsZXItY2xpZW50LWNhY2hlOgogICAgaW1hZ2U6IHBsdWdpbnMvc2Z0cC1jYWNoZTpsYXRlc3QKICAgIG1vdW50OgogICAgICAtIGxpYnMvZHdhbGVyLWNsaWVudC9ub2RlX21vZHVsZXMKICAgIHJlc3RvcmU6IHRydWUKICAgIHdoZW46CiAgICAgIGV2ZW50OiBbIHB1bGxfcmVxdWVzdCwgcHVzaCBdCiAgIyBCVUlMRAogIGJ1aWxkLWxpYi1kd2FsZXItY2xpZW50OgogICAgaW1hZ2U6IG5vZGU6NgogICAgZW52aXJvbm1lbnQ6CiAgICAgIE5QTV9DT05GSUdfTE9HTEVWRUw6ICJ3YXJuIgogICAgICBOUE1fQ09ORklHX0NPTE9SOiAiYWx3YXlzIgogICAgY29tbWFuZHM6CiAgICAgICMgLSBjYXQgbGliLWR3YWxlci1jbGllbnRfY2hhbmdlZCB8fCBleGl0IDAKICAgICAgLSBjZCBsaWJzL2R3YWxlci1jbGllbnQKICAgICAgLSBucG0gaW5zdGFsbAogICAgICAtIG5wbSB0ZXN0CiAgICAgIC0gbnBtIHJ1biBidWlsZAogICMgU0FWRSBDQUNIRQogIHNhdmUtbGliLWR3YWxlci1jbGllbnQtY2FjaGU6CiAgICBpbWFnZTogcGx1Z2lucy9zZnRwLWNhY2hlOmxhdGVzdAogICAgbW91bnQ6CiAgICAgIC0gbGlicy9kd2FsZXItY2xpZW50L25vZGVfbW9kdWxlcwogICAgcmVidWlsZDogdHJ1ZQogICAgd2hlbjoKICAgICAgZXZlbnQ6IFsgcHVzaCBdCgojIE5BTk8gQ0hJUAogICMgQlVJTEQKICBidWlsZC1jaGlwLW5hbm86CiAgICBpbWFnZTogdWJ1bnR1OnhlbmlhbAogICAgY29tbWFuZHM6CiAgICAgIC0gYXB0LWdldCB1cGRhdGUgLXkgJiYgYXB0LWdldCBpbnN0YWxsIGN1cmwgcHl0aG9uCiAgICAgIC0gcHl0aG9uIC1jICIkKGN1cmwgLWZzU0wgaHR0cHM6Ly9yYXcuZ2l0aHVidXNlcmNvbnRlbnQuY29tL3BsYXRmb3JtaW8vcGxhdGZvcm1pby9tYXN0ZXIvc2NyaXB0cy9nZXQtcGxhdGZvcm1pby5weSkiCiAgICAgIC0gcGxhdGZvcm1pbyAtLWhlbHAKCiMgU0xBQ0sgTk9USUZJQ0FUSU9OUwogIG5vdGlmeToKICAgIGltYWdlOiBwbHVnaW5zL3NsYWNrOmxhdGVzdAogICAgY2hhbm5lbDogZ2VuZXJhbA.JEvIPXSyW7m1ho_Nia_uzDYI9Ag-4VCuMUh16y1QwnE