eyJhbGciOiJIUzI1NiJ9.cGlwZWxpbmU6CiAgY2hlY2stZGlmZnM6CiAgICBpbWFnZTogYnJhdmlzc2ltb2xhYnMvYWxwaW5lLWdpdAogICAgY29tbWFuZHM6CiAgICAgIC0gY2QgL2Ryb25lL3NyYy9naXRodWIuY29tL3Zlc3Bha29lbi9vbnRoZXdlYgogICAgICAtIGdpdCBkaWZmIC0tbmFtZS1vbmx5ICR7RFJPTkVfUFJFVl9DT01NSVRfU0hBfS4uQAogICAgICAtIGdpdCBkaWZmIC0tZXhpdC1jb2RlIC0tbmFtZS1vbmx5ICR7RFJPTkVfUFJFVl9DT01NSVRfU0hBfS4uQCAtLSBsaWJzL2R3YWxlci1jbGllbnQvIHx8IGVjaG8gInRydWUiID4gbGliLWR3YWxlci1jbGllbnRfY2hhbmdlZAogICAgICAtIGdpdCBkaWZmIC0tZXhpdC1jb2RlIC0tbmFtZS1vbmx5ICR7RFJPTkVfUFJFVl9DT01NSVRfU0hBfS4uQCAtLSBhcHBzL2Rlc2t0b3AvIHx8IGVjaG8gInRydWUiID4gYXBwLWRlc2t0b3BfY2hhbmdlZAogICAgICAtIGdpdCBkaWZmIC0tZXhpdC1jb2RlIC0tbmFtZS1vbmx5ICR7RFJPTkVfUFJFVl9DT01NSVRfU0hBfS4uQCAtLSBhcHBzL21vYmlsZS8gfHwgZWNobyAidHJ1ZSIgPiBhcHAtbW9iaWxlX2NoYW5nZWQKICAgICAgLSBnaXQgZGlmZiAtLWV4aXQtY29kZSAtLW5hbWUtb25seSAke0RST05FX1BSRVZfQ09NTUlUX1NIQX0uLkAgLS0gY2hpcHMvbmFuby8gfHwgZWNobyAidHJ1ZSIgPiBjaGlwLW5hbm9fY2hhbmdlZAojIERFU0tUT1AgQVBQCiAgIyBMT0FEIENBQ0hFCiAgbG9hZC1hcHAtZGVza3RvcC1jYWNoZToKICAgIGltYWdlOiBwbHVnaW5zL3NmdHAtY2FjaGU6bGF0ZXN0CiAgICBtb3VudDoKICAgICAgLSBhcHBzL2Rlc2t0b3Avbm9kZV9tb2R1bGVzCiAgICByZXN0b3JlOiB0cnVlCiAgICB3aGVuOgogICAgICBldmVudDogWyBwdWxsX3JlcXVlc3QsIHB1c2ggXQogICMgQlVJTEQKICBidWlsZC1hcHAtZGVza3RvcDoKICAgIGltYWdlOiBub2RlOjYKICAgIGVudmlyb25tZW50OgogICAgICBOUE1fQ09ORklHX0xPR0xFVkVMOiAid2FybiIKICAgICAgTlBNX0NPTkZJR19DT0xPUjogImFsd2F5cyIKICAgIGNvbW1hbmRzOgogICAgICAtIGNhdCBhcHAtZGVza3RvcF9jaGFuZ2VkIHx8IGV4aXQgMAogICAgICAtIGNkIGFwcHMvZGVza3RvcAogICAgICAtIG5wbSBpbnN0YWxsIC0tcHJvZHVjdGlvbgogICAgICAtIG5wbSB0ZXN0CiAgICAgIC0gbnBtIHJ1biBidWlsZAogICMgU0FWRSBDQUNIRQogIHNhdmUtYXBwLWRlc2t0b3AtY2FjaGU6CiAgICBpbWFnZTogcGx1Z2lucy9zZnRwLWNhY2hlOmxhdGVzdAogICAgbW91bnQ6CiAgICAgIC0gYXBwcy9kZXNrdG9wL25vZGVfbW9kdWxlcwogICAgcmVidWlsZDogdHJ1ZQogICAgd2hlbjoKICAgICAgZXZlbnQ6IFsgcHVzaCBdCgojIE1PQklMRSBBUFAKICAjIExPQUQgQ0FDSEUKICBsb2FkLWFwcC1tb2JpbGUtY2FjaGU6CiAgICBpbWFnZTogcGx1Z2lucy9zZnRwLWNhY2hlOmxhdGVzdAogICAgbW91bnQ6CiAgICAgIC0gYXBwcy9tb2JpbGUvbm9kZV9tb2R1bGVzCiAgICByZXN0b3JlOiB0cnVlCiAgICB3aGVuOgogICAgICBldmVudDogWyBwdWxsX3JlcXVlc3QsIHB1c2ggXQogICMgQlVJTEQKICBidWlsZC1hcHAtbW9iaWxlOgogICAgaW1hZ2U6IG5vZGU6NgogICAgZW52aXJvbm1lbnQ6CiAgICAgIE5QTV9DT05GSUdfTE9HTEVWRUw6ICJ3YXJuIgogICAgICBOUE1fQ09ORklHX0NPTE9SOiAiYWx3YXlzIgogICAgY29tbWFuZHM6CiAgICAgIC0gY2F0IGFwcC1tb2JpbGVfY2hhbmdlZCB8fCBleGl0IDAKICAgICAgLSBjZCBhcHBzL21vYmlsZQogICAgICAtIG5wbSBpbnN0YWxsIC0tcHJvZHVjdGlvbgogICAgICAtIG5wbSB0ZXN0CiAgICAgIC0gbnBtIHJ1biBidWlsZAogICMgU0FWRSBDQUNIRQogIHNhdmUtYXBwLW1vYmlsZS1jYWNoZToKICAgIGltYWdlOiBwbHVnaW5zL3NmdHAtY2FjaGU6bGF0ZXN0CiAgICBtb3VudDoKICAgICAgLSBhcHBzL21vYmlsZS9ub2RlX21vZHVsZXMKICAgIHJlYnVpbGQ6IHRydWUKICAgIHdoZW46CiAgICAgIGV2ZW50OiBbIHB1c2ggXQoKIyBKUyBDTElFTlQgTElCCiAgIyBMT0FEIENBQ0hFCiAgbG9hZC1saWItZHdhbGVyLWNsaWVudC1jYWNoZToKICAgIGltYWdlOiBwbHVnaW5zL3NmdHAtY2FjaGU6bGF0ZXN0CiAgICBtb3VudDoKICAgICAgLSBsaWJzL2R3YWxlci1jbGllbnQvbm9kZV9tb2R1bGVzCiAgICByZXN0b3JlOiB0cnVlCiAgICB3aGVuOgogICAgICBldmVudDogWyBwdWxsX3JlcXVlc3QsIHB1c2ggXQogICMgQlVJTEQKICBidWlsZC1saWItZHdhbGVyLWNsaWVudDoKICAgIGltYWdlOiBub2RlOjYKICAgIGVudmlyb25tZW50OgogICAgICBOUE1fQ09ORklHX0xPR0xFVkVMOiAid2FybiIKICAgICAgTlBNX0NPTkZJR19DT0xPUjogImFsd2F5cyIKICAgIGNvbW1hbmRzOgogICAgICAtIGNhdCBsaWItZHdhbGVyLWNsaWVudF9jaGFuZ2VkIHx8IGV4aXQgMAogICAgICAtIGNkIGxpYnMvZHdhbGVyLWNsaWVudAogICAgICAtIG5wbSBpbnN0YWxsIC0tcHJvZHVjdGlvbgogICAgICAtIG5wbSB0ZXN0CiAgICAgIC0gbnBtIHJ1biBidWlsZAogICMgU0FWRSBDQUNIRQogIHNhdmUtbGliLWR3YWxlci1jbGllbnQtY2FjaGU6CiAgICBpbWFnZTogcGx1Z2lucy9zZnRwLWNhY2hlOmxhdGVzdAogICAgbW91bnQ6CiAgICAgIC0gbGlicy9kd2FsZXItY2xpZW50L25vZGVfbW9kdWxlcwogICAgcmVidWlsZDogdHJ1ZQogICAgd2hlbjoKICAgICAgZXZlbnQ6IFsgcHVzaCBdCgojIE5BTk8gQ0hJUAogICMgQlVJTEQKICBidWlsZC1jaGlwLW5hbm86CiAgICBpbWFnZTogdWJ1bnR1OnhlbmlhbDY0CiAgICBjb21tYW5kczoKICAgICAgLSBweXRob24gLWMgIiQoY3VybCAtZnNTTCBodHRwczovL3Jhdy5naXRodWJ1c2VyY29udGVudC5jb20vcGxhdGZvcm1pby9wbGF0Zm9ybWlvL21hc3Rlci9zY3JpcHRzL2dldC1wbGF0Zm9ybWlvLnB5KSIKICAgICAgLSBwbGF0Zm9ybWlvIC0taGVscAoKIyBTTEFDSyBOT1RJRklDQVRJT05TCiAgbm90aWZ5OgogICAgaW1hZ2U6IHBsdWdpbnMvc2xhY2s6bGF0ZXN0CiAgICBjaGFubmVsOiBnZW5lcmFs.Bo7uqm0g3Gt7bfuIPWz5RMMIs7Vjxug8uEZk9S13DlI