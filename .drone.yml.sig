eyJhbGciOiJIUzI1NiJ9.cGlwZWxpbmU6CiAgY2hlY2stZGlmZnM6CiAgICBpbWFnZTogYnJhdmlzc2ltb2xhYnMvYWxwaW5lLWdpdAogICAgY29tbWFuZHM6CiAgICAgIC0gY2QgL2Ryb25lL3NyYy9naXRodWIuY29tL3Zlc3Bha29lbi9kd2FsZXIKICAgICAgLSBnaXQgZGlmZiAtLW5hbWUtb25seSAke0RST05FX1BSRVZfQ09NTUlUX1NIQX0uLkAKICAgICAgLSBnaXQgZGlmZiAtLWV4aXQtY29kZSAtLW5hbWUtb25seSAke0RST05FX1BSRVZfQ09NTUlUX1NIQX0uLkAgLS0gbGlicy9kd2FsZXItY2xpZW50LyB8fCBlY2hvICJ0cnVlIiA-IGxpYi1kd2FsZXItY2xpZW50X2NoYW5nZWQKICAgICAgLSBnaXQgZGlmZiAtLWV4aXQtY29kZSAtLW5hbWUtb25seSAke0RST05FX1BSRVZfQ09NTUlUX1NIQX0uLkAgLS0gYXBwcy9kZXNrdG9wLyB8fCBlY2hvICJ0cnVlIiA-IGFwcC1kZXNrdG9wX2NoYW5nZWQKICAgICAgLSBnaXQgZGlmZiAtLWV4aXQtY29kZSAtLW5hbWUtb25seSAke0RST05FX1BSRVZfQ09NTUlUX1NIQX0uLkAgLS0gYXBwcy9tb2JpbGUvIHx8IGVjaG8gInRydWUiID4gYXBwLW1vYmlsZV9jaGFuZ2VkCiAgICAgIC0gZ2l0IGRpZmYgLS1leGl0LWNvZGUgLS1uYW1lLW9ubHkgJHtEUk9ORV9QUkVWX0NPTU1JVF9TSEF9Li5AIC0tIGNoaXBzL25hbm8vIHx8IGVjaG8gInRydWUiID4gY2hpcC1uYW5vX2NoYW5nZWQKIyBERVNLVE9QIEFQUAogICMgTE9BRCBDQUNIRQogIGxvYWQtYXBwLWRlc2t0b3AtY2FjaGU6CiAgICBpbWFnZTogcGx1Z2lucy9zZnRwLWNhY2hlOmxhdGVzdAogICAgbW91bnQ6CiAgICAgIC0gYXBwcy9kZXNrdG9wL25vZGVfbW9kdWxlcwogICAgcmVzdG9yZTogdHJ1ZQogICAgd2hlbjoKICAgICAgZXZlbnQ6IFsgcHVsbF9yZXF1ZXN0LCBwdXNoIF0KICAjIEJVSUxECiAgYnVpbGQtYXBwLWRlc2t0b3A6CiAgICBpbWFnZTogbm9kZTo2CiAgICBlbnZpcm9ubWVudDoKICAgICAgTlBNX0NPTkZJR19MT0dMRVZFTDogIndhcm4iCiAgICAgIE5QTV9DT05GSUdfQ09MT1I6ICJhbHdheXMiCiAgICBjb21tYW5kczoKICAgICAgLSBjYXQgYXBwLWRlc2t0b3BfY2hhbmdlZCB8fCBleGl0IDAKICAgICAgLSBjZCBhcHBzL2Rlc2t0b3AKICAgICAgLSBucG0gaW5zdGFsbCAtLXByb2R1Y3Rpb24KICAgICAgLSBucG0gdGVzdAogICAgICAtIG5wbSBydW4gYnVpbGQKICAjIFNBVkUgQ0FDSEUKICBzYXZlLWFwcC1kZXNrdG9wLWNhY2hlOgogICAgaW1hZ2U6IHBsdWdpbnMvc2Z0cC1jYWNoZTpsYXRlc3QKICAgIG1vdW50OgogICAgICAtIGFwcHMvZGVza3RvcC9ub2RlX21vZHVsZXMKICAgIHJlYnVpbGQ6IHRydWUKICAgIHdoZW46CiAgICAgIGV2ZW50OiBbIHB1c2ggXQoKIyBNT0JJTEUgQVBQCiAgIyBMT0FEIENBQ0hFCiAgbG9hZC1hcHAtbW9iaWxlLWNhY2hlOgogICAgaW1hZ2U6IHBsdWdpbnMvc2Z0cC1jYWNoZTpsYXRlc3QKICAgIG1vdW50OgogICAgICAtIGFwcHMvbW9iaWxlL25vZGVfbW9kdWxlcwogICAgcmVzdG9yZTogdHJ1ZQogICAgd2hlbjoKICAgICAgZXZlbnQ6IFsgcHVsbF9yZXF1ZXN0LCBwdXNoIF0KICAjIEJVSUxECiAgYnVpbGQtYXBwLW1vYmlsZToKICAgIGltYWdlOiBub2RlOjYKICAgIGVudmlyb25tZW50OgogICAgICBOUE1fQ09ORklHX0xPR0xFVkVMOiAid2FybiIKICAgICAgTlBNX0NPTkZJR19DT0xPUjogImFsd2F5cyIKICAgIGNvbW1hbmRzOgogICAgICAtIGNhdCBhcHAtbW9iaWxlX2NoYW5nZWQgfHwgZXhpdCAwCiAgICAgIC0gY2QgYXBwcy9tb2JpbGUKICAgICAgLSBucG0gaW5zdGFsbCAtLXByb2R1Y3Rpb24KICAgICAgLSBucG0gdGVzdAogICAgICAtIG5wbSBydW4gYnVpbGQKICAjIFNBVkUgQ0FDSEUKICBzYXZlLWFwcC1tb2JpbGUtY2FjaGU6CiAgICBpbWFnZTogcGx1Z2lucy9zZnRwLWNhY2hlOmxhdGVzdAogICAgbW91bnQ6CiAgICAgIC0gYXBwcy9tb2JpbGUvbm9kZV9tb2R1bGVzCiAgICByZWJ1aWxkOiB0cnVlCiAgICB3aGVuOgogICAgICBldmVudDogWyBwdXNoIF0KCiMgSlMgQ0xJRU5UIExJQgogICMgTE9BRCBDQUNIRQogIGxvYWQtbGliLWR3YWxlci1jbGllbnQtY2FjaGU6CiAgICBpbWFnZTogcGx1Z2lucy9zZnRwLWNhY2hlOmxhdGVzdAogICAgbW91bnQ6CiAgICAgIC0gbGlicy9kd2FsZXItY2xpZW50L25vZGVfbW9kdWxlcwogICAgcmVzdG9yZTogdHJ1ZQogICAgd2hlbjoKICAgICAgZXZlbnQ6IFsgcHVsbF9yZXF1ZXN0LCBwdXNoIF0KICAjIEJVSUxECiAgYnVpbGQtbGliLWR3YWxlci1jbGllbnQ6CiAgICBpbWFnZTogbm9kZTo2CiAgICBlbnZpcm9ubWVudDoKICAgICAgTlBNX0NPTkZJR19MT0dMRVZFTDogIndhcm4iCiAgICAgIE5QTV9DT05GSUdfQ09MT1I6ICJhbHdheXMiCiAgICBjb21tYW5kczoKICAgICAgLSBjYXQgbGliLWR3YWxlci1jbGllbnRfY2hhbmdlZCB8fCBleGl0IDAKICAgICAgLSBjZCBsaWJzL2R3YWxlci1jbGllbnQKICAgICAgLSBucG0gaW5zdGFsbCAtLXByb2R1Y3Rpb24KICAgICAgLSBucG0gdGVzdAogICAgICAtIG5wbSBydW4gYnVpbGQKICAjIFNBVkUgQ0FDSEUKICBzYXZlLWxpYi1kd2FsZXItY2xpZW50LWNhY2hlOgogICAgaW1hZ2U6IHBsdWdpbnMvc2Z0cC1jYWNoZTpsYXRlc3QKICAgIG1vdW50OgogICAgICAtIGxpYnMvZHdhbGVyLWNsaWVudC9ub2RlX21vZHVsZXMKICAgIHJlYnVpbGQ6IHRydWUKICAgIHdoZW46CiAgICAgIGV2ZW50OiBbIHB1c2ggXQoKIyBOQU5PIENISVAKICAjIEJVSUxECiAgYnVpbGQtY2hpcC1uYW5vOgogICAgaW1hZ2U6IHVidW50dTp4ZW5pYWwKICAgIGNvbW1hbmRzOgogICAgICAtIHB5dGhvbiAtYyAiJChjdXJsIC1mc1NMIGh0dHBzOi8vcmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbS9wbGF0Zm9ybWlvL3BsYXRmb3JtaW8vbWFzdGVyL3NjcmlwdHMvZ2V0LXBsYXRmb3JtaW8ucHkpIgogICAgICAtIHBsYXRmb3JtaW8gLS1oZWxwCgojIFNMQUNLIE5PVElGSUNBVElPTlMKICBub3RpZnk6CiAgICBpbWFnZTogcGx1Z2lucy9zbGFjazpsYXRlc3QKICAgIGNoYW5uZWw6IGdlbmVyYWw.Aep9NlvOtYPdR4pXe2WMxbnMx8ji6-fB5Tbs05TThOg